-- ==============================================================
-- Generated by Vitis HLS v2023.2.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cache_access is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    address : IN STD_LOGIC_VECTOR (10 downto 0);
    value_r : IN STD_LOGIC_VECTOR (31 downto 0);
    action : IN STD_LOGIC_VECTOR (0 downto 0);
    mymem_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    mymem_ce0 : OUT STD_LOGIC;
    mymem_we0 : OUT STD_LOGIC;
    mymem_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    mymem_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of cache_access is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "cache_access_cache_access,hls_ip_2023_2_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7ev-ffvf1517-3-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.432000,HLS_SYN_LAT=58,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=0,HLS_SYN_FF=147,HLS_SYN_LUT=552,HLS_VERSION=2023_2_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal cache_tag_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal cache_tag_ce0 : STD_LOGIC;
    signal cache_tag_we0 : STD_LOGIC;
    signal cache_tag_q0 : STD_LOGIC_VECTOR (2 downto 0);
    signal set_old_3 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal set_old_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal set_old_1 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal set_old_2 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal cache_valid_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal cache_valid_ce0 : STD_LOGIC;
    signal cache_valid_we0 : STD_LOGIC;
    signal cache_valid_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal cache_dirty_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal cache_dirty_ce0 : STD_LOGIC;
    signal cache_dirty_we0 : STD_LOGIC;
    signal cache_dirty_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal cache_dirty_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal cache_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal cache_ce0 : STD_LOGIC;
    signal cache_we0 : STD_LOGIC;
    signal cache_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal cache_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tag_reg_443 : STD_LOGIC_VECTOR (2 downto 0);
    signal index_fu_263_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal index_reg_449 : STD_LOGIC_VECTOR (1 downto 0);
    signal offset_fu_273_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal offset_reg_458 : STD_LOGIC_VECTOR (5 downto 0);
    signal zerod_fu_277_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal zerod_reg_464 : STD_LOGIC_VECTOR (2 downto 0);
    signal action_read_read_fu_90_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal address_1_fu_293_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal address_1_reg_485 : STD_LOGIC_VECTOR (10 downto 0);
    signal oned_fu_298_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal oned_reg_490 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_248_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln43_reg_495 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln57_fu_401_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln57_reg_507 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal cache_valid_addr_reg_515 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_fu_406_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_1_reg_520 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal or_ln57_fu_420_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln57_reg_526 : STD_LOGIC_VECTOR (0 downto 0);
    signal cache_dirty_addr_reg_530 : STD_LOGIC_VECTOR (2 downto 0);
    signal cache_dirty_load_reg_535 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal cache_tag_load_2_reg_544 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal cache_addr_reg_549 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_cache_access_Pipeline_VITIS_LOOP_24_1_fu_226_ap_start : STD_LOGIC;
    signal grp_cache_access_Pipeline_VITIS_LOOP_24_1_fu_226_ap_done : STD_LOGIC;
    signal grp_cache_access_Pipeline_VITIS_LOOP_24_1_fu_226_ap_idle : STD_LOGIC;
    signal grp_cache_access_Pipeline_VITIS_LOOP_24_1_fu_226_ap_ready : STD_LOGIC;
    signal grp_cache_access_Pipeline_VITIS_LOOP_24_1_fu_226_mymem_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_cache_access_Pipeline_VITIS_LOOP_24_1_fu_226_mymem_ce0 : STD_LOGIC;
    signal grp_cache_access_Pipeline_VITIS_LOOP_24_1_fu_226_mymem_we0 : STD_LOGIC;
    signal grp_cache_access_Pipeline_VITIS_LOOP_24_1_fu_226_mymem_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cache_access_Pipeline_VITIS_LOOP_24_1_fu_226_cache_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_cache_access_Pipeline_VITIS_LOOP_24_1_fu_226_cache_ce0 : STD_LOGIC;
    signal grp_cache_access_Pipeline_VITIS_LOOP_24_11_fu_238_ap_start : STD_LOGIC;
    signal grp_cache_access_Pipeline_VITIS_LOOP_24_11_fu_238_ap_done : STD_LOGIC;
    signal grp_cache_access_Pipeline_VITIS_LOOP_24_11_fu_238_ap_idle : STD_LOGIC;
    signal grp_cache_access_Pipeline_VITIS_LOOP_24_11_fu_238_ap_ready : STD_LOGIC;
    signal grp_cache_access_Pipeline_VITIS_LOOP_24_11_fu_238_mymem_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_cache_access_Pipeline_VITIS_LOOP_24_11_fu_238_mymem_ce0 : STD_LOGIC;
    signal grp_cache_access_Pipeline_VITIS_LOOP_24_11_fu_238_cache_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_cache_access_Pipeline_VITIS_LOOP_24_11_fu_238_cache_ce0 : STD_LOGIC;
    signal grp_cache_access_Pipeline_VITIS_LOOP_24_11_fu_238_cache_we0 : STD_LOGIC;
    signal grp_cache_access_Pipeline_VITIS_LOOP_24_11_fu_238_cache_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal cache_index_fu_363_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_cache_index_1_phi_fu_191_p6 : STD_LOGIC_VECTOR (2 downto 0);
    signal cache_index_1_reg_188 : STD_LOGIC_VECTOR (2 downto 0);
    signal not_in_cache_reg_200 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_ret_value_1_phi_fu_219_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_value_1_reg_216 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_cache_access_Pipeline_VITIS_LOOP_24_1_fu_226_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_cache_access_Pipeline_VITIS_LOOP_24_11_fu_238_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal zext_ln43_fu_285_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln46_fu_303_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal cache_tag_addr_3_gep_fu_159_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln72_fu_433_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal cache_dirty_addr_1_gep_fu_174_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal xor_ln52_fu_371_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state7_on_subcall_done : BOOLEAN;
    signal ap_block_state9_on_subcall_done : BOOLEAN;
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal zext_ln38_fu_290_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln9_fu_324_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln9_1_fu_337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln9_fu_329_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln9_2_fu_350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln9_1_fu_342_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln9_2_fu_355_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln57_fu_414_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_426_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component cache_access_cache_access_Pipeline_VITIS_LOOP_24_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        zext_ln26_3 : IN STD_LOGIC_VECTOR (8 downto 0);
        cache_tag_load_2 : IN STD_LOGIC_VECTOR (2 downto 0);
        index : IN STD_LOGIC_VECTOR (1 downto 0);
        mymem_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        mymem_ce0 : OUT STD_LOGIC;
        mymem_we0 : OUT STD_LOGIC;
        mymem_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        cache_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        cache_ce0 : OUT STD_LOGIC;
        cache_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cache_access_cache_access_Pipeline_VITIS_LOOP_24_11 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        zext_ln26_3 : IN STD_LOGIC_VECTOR (8 downto 0);
        address_1 : IN STD_LOGIC_VECTOR (10 downto 0);
        mymem_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        mymem_ce0 : OUT STD_LOGIC;
        mymem_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        cache_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        cache_ce0 : OUT STD_LOGIC;
        cache_we0 : OUT STD_LOGIC;
        cache_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cache_access_cache_tag_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (2 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component cache_access_cache_valid_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component cache_access_cache_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    cache_tag_U : component cache_access_cache_tag_RAM_AUTO_1R1W
    generic map (
        DataWidth => 3,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => cache_tag_address0,
        ce0 => cache_tag_ce0,
        we0 => cache_tag_we0,
        d0 => tag_reg_443,
        q0 => cache_tag_q0);

    cache_valid_U : component cache_access_cache_valid_RAM_AUTO_1R1W
    generic map (
        DataWidth => 1,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => cache_valid_address0,
        ce0 => cache_valid_ce0,
        we0 => cache_valid_we0,
        d0 => ap_const_lv1_1,
        q0 => cache_valid_q0);

    cache_dirty_U : component cache_access_cache_valid_RAM_AUTO_1R1W
    generic map (
        DataWidth => 1,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => cache_dirty_address0,
        ce0 => cache_dirty_ce0,
        we0 => cache_dirty_we0,
        d0 => cache_dirty_d0,
        q0 => cache_dirty_q0);

    cache_U : component cache_access_cache_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => cache_address0,
        ce0 => cache_ce0,
        we0 => cache_we0,
        d0 => cache_d0,
        q0 => cache_q0);

    grp_cache_access_Pipeline_VITIS_LOOP_24_1_fu_226 : component cache_access_cache_access_Pipeline_VITIS_LOOP_24_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_cache_access_Pipeline_VITIS_LOOP_24_1_fu_226_ap_start,
        ap_done => grp_cache_access_Pipeline_VITIS_LOOP_24_1_fu_226_ap_done,
        ap_idle => grp_cache_access_Pipeline_VITIS_LOOP_24_1_fu_226_ap_idle,
        ap_ready => grp_cache_access_Pipeline_VITIS_LOOP_24_1_fu_226_ap_ready,
        zext_ln26_3 => tmp_1_reg_520,
        cache_tag_load_2 => cache_tag_load_2_reg_544,
        index => index_reg_449,
        mymem_address0 => grp_cache_access_Pipeline_VITIS_LOOP_24_1_fu_226_mymem_address0,
        mymem_ce0 => grp_cache_access_Pipeline_VITIS_LOOP_24_1_fu_226_mymem_ce0,
        mymem_we0 => grp_cache_access_Pipeline_VITIS_LOOP_24_1_fu_226_mymem_we0,
        mymem_d0 => grp_cache_access_Pipeline_VITIS_LOOP_24_1_fu_226_mymem_d0,
        cache_address0 => grp_cache_access_Pipeline_VITIS_LOOP_24_1_fu_226_cache_address0,
        cache_ce0 => grp_cache_access_Pipeline_VITIS_LOOP_24_1_fu_226_cache_ce0,
        cache_q0 => cache_q0);

    grp_cache_access_Pipeline_VITIS_LOOP_24_11_fu_238 : component cache_access_cache_access_Pipeline_VITIS_LOOP_24_11
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_cache_access_Pipeline_VITIS_LOOP_24_11_fu_238_ap_start,
        ap_done => grp_cache_access_Pipeline_VITIS_LOOP_24_11_fu_238_ap_done,
        ap_idle => grp_cache_access_Pipeline_VITIS_LOOP_24_11_fu_238_ap_idle,
        ap_ready => grp_cache_access_Pipeline_VITIS_LOOP_24_11_fu_238_ap_ready,
        zext_ln26_3 => tmp_1_reg_520,
        address_1 => address_1_reg_485,
        mymem_address0 => grp_cache_access_Pipeline_VITIS_LOOP_24_11_fu_238_mymem_address0,
        mymem_ce0 => grp_cache_access_Pipeline_VITIS_LOOP_24_11_fu_238_mymem_ce0,
        mymem_q0 => mymem_q0,
        cache_address0 => grp_cache_access_Pipeline_VITIS_LOOP_24_11_fu_238_cache_address0,
        cache_ce0 => grp_cache_access_Pipeline_VITIS_LOOP_24_11_fu_238_cache_ce0,
        cache_we0 => grp_cache_access_Pipeline_VITIS_LOOP_24_11_fu_238_cache_we0,
        cache_d0 => grp_cache_access_Pipeline_VITIS_LOOP_24_11_fu_238_cache_d0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_cache_access_Pipeline_VITIS_LOOP_24_11_fu_238_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_cache_access_Pipeline_VITIS_LOOP_24_11_fu_238_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    grp_cache_access_Pipeline_VITIS_LOOP_24_11_fu_238_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_cache_access_Pipeline_VITIS_LOOP_24_11_fu_238_ap_ready = ap_const_logic_1)) then 
                    grp_cache_access_Pipeline_VITIS_LOOP_24_11_fu_238_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_cache_access_Pipeline_VITIS_LOOP_24_1_fu_226_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_cache_access_Pipeline_VITIS_LOOP_24_1_fu_226_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    grp_cache_access_Pipeline_VITIS_LOOP_24_1_fu_226_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_cache_access_Pipeline_VITIS_LOOP_24_1_fu_226_ap_ready = ap_const_logic_1)) then 
                    grp_cache_access_Pipeline_VITIS_LOOP_24_1_fu_226_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    cache_index_1_reg_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln43_reg_495 = ap_const_lv1_0) and (grp_fu_248_p2 = ap_const_lv1_1))) then 
                cache_index_1_reg_188 <= oned_reg_490;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_fu_248_p2 = ap_const_lv1_1))) then 
                cache_index_1_reg_188 <= zerod_reg_464;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln43_reg_495 = ap_const_lv1_0) and (grp_fu_248_p2 = ap_const_lv1_0))) then 
                cache_index_1_reg_188 <= cache_index_fu_363_p3;
            end if; 
        end if;
    end process;

    not_in_cache_reg_200_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln43_reg_495 = ap_const_lv1_0) and (grp_fu_248_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_fu_248_p2 = ap_const_lv1_1)))) then 
                not_in_cache_reg_200 <= ap_const_lv1_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln43_reg_495 = ap_const_lv1_0) and (grp_fu_248_p2 = ap_const_lv1_0))) then 
                not_in_cache_reg_200 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    ret_value_1_reg_216_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                ret_value_1_reg_216 <= value_r;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_lv1_1 = action_read_read_fu_90_p2))) then 
                ret_value_1_reg_216 <= cache_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                address_1_reg_485 <= address_1_fu_293_p2;
                icmp_ln43_reg_495 <= grp_fu_248_p2;
                    oned_reg_490(2 downto 1) <= oned_fu_298_p2(2 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                cache_addr_reg_549 <= zext_ln72_fu_433_p1(9 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                cache_dirty_addr_reg_530 <= zext_ln57_reg_507(3 - 1 downto 0);
                or_ln57_reg_526 <= or_ln57_fu_420_p2;
                    tmp_1_reg_520(8 downto 6) <= tmp_1_fu_406_p3(8 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                cache_dirty_load_reg_535 <= cache_dirty_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                cache_tag_load_2_reg_544 <= cache_tag_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                cache_valid_addr_reg_515 <= zext_ln57_fu_401_p1(3 - 1 downto 0);
                    zext_ln57_reg_507(2 downto 0) <= zext_ln57_fu_401_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                index_reg_449 <= address(7 downto 6);
                offset_reg_458 <= offset_fu_273_p1;
                tag_reg_443 <= address(10 downto 8);
                    zerod_reg_464(2 downto 1) <= zerod_fu_277_p3(2 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((index_reg_449 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln43_reg_495 = ap_const_lv1_0) and (grp_fu_248_p2 = ap_const_lv1_0))) then
                set_old_0 <= xor_ln52_fu_371_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((index_reg_449 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln43_reg_495 = ap_const_lv1_0) and (grp_fu_248_p2 = ap_const_lv1_0))) then
                set_old_1 <= xor_ln52_fu_371_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((index_reg_449 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln43_reg_495 = ap_const_lv1_0) and (grp_fu_248_p2 = ap_const_lv1_0))) then
                set_old_2 <= xor_ln52_fu_371_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((index_reg_449 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln43_reg_495 = ap_const_lv1_0) and (grp_fu_248_p2 = ap_const_lv1_0))) then
                set_old_3 <= xor_ln52_fu_371_p2;
            end if;
        end if;
    end process;
    zerod_reg_464(0) <= '0';
    oned_reg_490(0) <= '1';
    zext_ln57_reg_507(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    tmp_1_reg_520(5 downto 0) <= "000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, cache_dirty_q0, action_read_read_fu_90_p2, ap_CS_fsm_state4, or_ln57_fu_420_p2, ap_CS_fsm_state5, ap_CS_fsm_state9, ap_CS_fsm_state7, ap_block_state7_on_subcall_done, ap_block_state9_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (or_ln57_fu_420_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((cache_dirty_q0 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_boolean_0 = ap_block_state7_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((ap_const_boolean_0 = ap_block_state9_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = action_read_read_fu_90_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                elsif (((ap_const_lv1_0 = action_read_read_fu_90_p2) and (ap_const_boolean_0 = ap_block_state9_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    action_read_read_fu_90_p2 <= action;
    address_1_fu_293_p2 <= std_logic_vector(unsigned(address) - unsigned(zext_ln38_fu_290_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;

    ap_ST_fsm_state7_blk_assign_proc : process(ap_block_state7_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state7_on_subcall_done)) then 
            ap_ST_fsm_state7_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state7_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state8_blk <= ap_const_logic_0;

    ap_ST_fsm_state9_blk_assign_proc : process(ap_block_state9_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state9_on_subcall_done)) then 
            ap_ST_fsm_state9_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state9_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state7_on_subcall_done_assign_proc : process(cache_dirty_load_reg_535, grp_cache_access_Pipeline_VITIS_LOOP_24_1_fu_226_ap_done)
    begin
                ap_block_state7_on_subcall_done <= ((grp_cache_access_Pipeline_VITIS_LOOP_24_1_fu_226_ap_done = ap_const_logic_0) and (cache_dirty_load_reg_535 = ap_const_lv1_1));
    end process;


    ap_block_state9_on_subcall_done_assign_proc : process(or_ln57_reg_526, grp_cache_access_Pipeline_VITIS_LOOP_24_11_fu_238_ap_done)
    begin
                ap_block_state9_on_subcall_done <= ((grp_cache_access_Pipeline_VITIS_LOOP_24_11_fu_238_ap_done = ap_const_logic_0) and (or_ln57_reg_526 = ap_const_lv1_1));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_cache_index_1_phi_fu_191_p6_assign_proc : process(oned_reg_490, grp_fu_248_p2, icmp_ln43_reg_495, ap_CS_fsm_state3, cache_index_fu_363_p3, cache_index_1_reg_188)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln43_reg_495 = ap_const_lv1_0))) then
            if ((grp_fu_248_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_cache_index_1_phi_fu_191_p6 <= oned_reg_490;
            elsif ((grp_fu_248_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_cache_index_1_phi_fu_191_p6 <= cache_index_fu_363_p3;
            else 
                ap_phi_mux_cache_index_1_phi_fu_191_p6 <= cache_index_1_reg_188;
            end if;
        else 
            ap_phi_mux_cache_index_1_phi_fu_191_p6 <= cache_index_1_reg_188;
        end if; 
    end process;


    ap_phi_mux_ret_value_1_phi_fu_219_p4_assign_proc : process(cache_q0, action_read_read_fu_90_p2, ret_value_1_reg_216, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_lv1_1 = action_read_read_fu_90_p2))) then 
            ap_phi_mux_ret_value_1_phi_fu_219_p4 <= cache_q0;
        else 
            ap_phi_mux_ret_value_1_phi_fu_219_p4 <= ret_value_1_reg_216;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= ap_phi_mux_ret_value_1_phi_fu_219_p4;

    cache_address0_assign_proc : process(or_ln57_reg_526, cache_dirty_load_reg_535, cache_addr_reg_549, ap_CS_fsm_state9, grp_cache_access_Pipeline_VITIS_LOOP_24_1_fu_226_cache_address0, grp_cache_access_Pipeline_VITIS_LOOP_24_11_fu_238_cache_address0, ap_CS_fsm_state10, ap_CS_fsm_state7, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            cache_address0 <= cache_addr_reg_549;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (or_ln57_reg_526 = ap_const_lv1_1))) then 
            cache_address0 <= grp_cache_access_Pipeline_VITIS_LOOP_24_11_fu_238_cache_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (cache_dirty_load_reg_535 = ap_const_lv1_1))) then 
            cache_address0 <= grp_cache_access_Pipeline_VITIS_LOOP_24_1_fu_226_cache_address0;
        else 
            cache_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    cache_ce0_assign_proc : process(or_ln57_reg_526, cache_dirty_load_reg_535, ap_CS_fsm_state9, grp_cache_access_Pipeline_VITIS_LOOP_24_1_fu_226_cache_ce0, grp_cache_access_Pipeline_VITIS_LOOP_24_11_fu_238_cache_ce0, ap_CS_fsm_state10, ap_CS_fsm_state7, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            cache_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (or_ln57_reg_526 = ap_const_lv1_1))) then 
            cache_ce0 <= grp_cache_access_Pipeline_VITIS_LOOP_24_11_fu_238_cache_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (cache_dirty_load_reg_535 = ap_const_lv1_1))) then 
            cache_ce0 <= grp_cache_access_Pipeline_VITIS_LOOP_24_1_fu_226_cache_ce0;
        else 
            cache_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cache_d0_assign_proc : process(value_r, or_ln57_reg_526, ap_CS_fsm_state9, grp_cache_access_Pipeline_VITIS_LOOP_24_11_fu_238_cache_d0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            cache_d0 <= value_r;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (or_ln57_reg_526 = ap_const_lv1_1))) then 
            cache_d0 <= grp_cache_access_Pipeline_VITIS_LOOP_24_11_fu_238_cache_d0;
        else 
            cache_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    cache_dirty_addr_1_gep_fu_174_p3 <= zext_ln57_reg_507(3 - 1 downto 0);

    cache_dirty_address0_assign_proc : process(zext_ln57_reg_507, ap_CS_fsm_state4, cache_dirty_addr_reg_530, ap_CS_fsm_state9, ap_CS_fsm_state7, cache_dirty_addr_1_gep_fu_174_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            cache_dirty_address0 <= cache_dirty_addr_1_gep_fu_174_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            cache_dirty_address0 <= cache_dirty_addr_reg_530;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            cache_dirty_address0 <= zext_ln57_reg_507(3 - 1 downto 0);
        else 
            cache_dirty_address0 <= "XXX";
        end if; 
    end process;


    cache_dirty_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state9, ap_CS_fsm_state7, ap_block_state7_on_subcall_done, ap_block_state9_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_boolean_0 = ap_block_state9_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((ap_const_boolean_0 = ap_block_state7_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            cache_dirty_ce0 <= ap_const_logic_1;
        else 
            cache_dirty_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cache_dirty_d0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            cache_dirty_d0 <= ap_const_lv1_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            cache_dirty_d0 <= ap_const_lv1_0;
        else 
            cache_dirty_d0 <= "X";
        end if; 
    end process;


    cache_dirty_we0_assign_proc : process(action_read_read_fu_90_p2, ap_CS_fsm_state9, ap_CS_fsm_state7, ap_block_state7_on_subcall_done, ap_block_state9_on_subcall_done)
    begin
        if ((((ap_const_boolean_0 = ap_block_state7_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((ap_const_lv1_0 = action_read_read_fu_90_p2) and (ap_const_boolean_0 = ap_block_state9_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            cache_dirty_we0 <= ap_const_logic_1;
        else 
            cache_dirty_we0 <= ap_const_logic_0;
        end if; 
    end process;

    cache_index_fu_363_p3 <= (index_reg_449 & select_ln9_2_fu_355_p3);
    cache_tag_addr_3_gep_fu_159_p3 <= zext_ln57_reg_507(3 - 1 downto 0);

    cache_tag_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, zext_ln57_reg_507, ap_CS_fsm_state5, ap_CS_fsm_state7, zext_ln43_fu_285_p1, zext_ln46_fu_303_p1, cache_tag_addr_3_gep_fu_159_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            cache_tag_address0 <= cache_tag_addr_3_gep_fu_159_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            cache_tag_address0 <= zext_ln57_reg_507(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            cache_tag_address0 <= zext_ln46_fu_303_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            cache_tag_address0 <= zext_ln43_fu_285_p1(3 - 1 downto 0);
        else 
            cache_tag_address0 <= "XXX";
        end if; 
    end process;


    cache_tag_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_block_state7_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_boolean_0 = ap_block_state7_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            cache_tag_ce0 <= ap_const_logic_1;
        else 
            cache_tag_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cache_tag_we0_assign_proc : process(ap_CS_fsm_state7, ap_block_state7_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state7_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            cache_tag_we0 <= ap_const_logic_1;
        else 
            cache_tag_we0 <= ap_const_logic_0;
        end if; 
    end process;


    cache_valid_address0_assign_proc : process(zext_ln57_fu_401_p1, ap_CS_fsm_state3, cache_valid_addr_reg_515, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            cache_valid_address0 <= cache_valid_addr_reg_515;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            cache_valid_address0 <= zext_ln57_fu_401_p1(3 - 1 downto 0);
        else 
            cache_valid_address0 <= "XXX";
        end if; 
    end process;


    cache_valid_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state7, ap_block_state7_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_boolean_0 = ap_block_state7_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            cache_valid_ce0 <= ap_const_logic_1;
        else 
            cache_valid_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cache_valid_we0_assign_proc : process(ap_CS_fsm_state7, ap_block_state7_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state7_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            cache_valid_we0 <= ap_const_logic_1;
        else 
            cache_valid_we0 <= ap_const_logic_0;
        end if; 
    end process;


    cache_we0_assign_proc : process(or_ln57_reg_526, ap_CS_fsm_state9, grp_cache_access_Pipeline_VITIS_LOOP_24_11_fu_238_cache_we0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            cache_we0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (or_ln57_reg_526 = ap_const_lv1_1))) then 
            cache_we0 <= grp_cache_access_Pipeline_VITIS_LOOP_24_11_fu_238_cache_we0;
        else 
            cache_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_cache_access_Pipeline_VITIS_LOOP_24_11_fu_238_ap_start <= grp_cache_access_Pipeline_VITIS_LOOP_24_11_fu_238_ap_start_reg;
    grp_cache_access_Pipeline_VITIS_LOOP_24_1_fu_226_ap_start <= grp_cache_access_Pipeline_VITIS_LOOP_24_1_fu_226_ap_start_reg;
    grp_fu_248_p2 <= "1" when (cache_tag_q0 = tag_reg_443) else "0";
    icmp_ln9_1_fu_337_p2 <= "1" when (index_reg_449 = ap_const_lv2_1) else "0";
    icmp_ln9_2_fu_350_p2 <= "1" when (index_reg_449 = ap_const_lv2_2) else "0";
    icmp_ln9_fu_324_p2 <= "1" when (index_reg_449 = ap_const_lv2_0) else "0";
    index_fu_263_p4 <= address(7 downto 6);

    mymem_address0_assign_proc : process(or_ln57_reg_526, cache_dirty_load_reg_535, ap_CS_fsm_state9, grp_cache_access_Pipeline_VITIS_LOOP_24_1_fu_226_mymem_address0, grp_cache_access_Pipeline_VITIS_LOOP_24_11_fu_238_mymem_address0, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (or_ln57_reg_526 = ap_const_lv1_1))) then 
            mymem_address0 <= grp_cache_access_Pipeline_VITIS_LOOP_24_11_fu_238_mymem_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (cache_dirty_load_reg_535 = ap_const_lv1_1))) then 
            mymem_address0 <= grp_cache_access_Pipeline_VITIS_LOOP_24_1_fu_226_mymem_address0;
        else 
            mymem_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    mymem_ce0_assign_proc : process(or_ln57_reg_526, cache_dirty_load_reg_535, ap_CS_fsm_state9, grp_cache_access_Pipeline_VITIS_LOOP_24_1_fu_226_mymem_ce0, grp_cache_access_Pipeline_VITIS_LOOP_24_11_fu_238_mymem_ce0, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (or_ln57_reg_526 = ap_const_lv1_1))) then 
            mymem_ce0 <= grp_cache_access_Pipeline_VITIS_LOOP_24_11_fu_238_mymem_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (cache_dirty_load_reg_535 = ap_const_lv1_1))) then 
            mymem_ce0 <= grp_cache_access_Pipeline_VITIS_LOOP_24_1_fu_226_mymem_ce0;
        else 
            mymem_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mymem_d0 <= grp_cache_access_Pipeline_VITIS_LOOP_24_1_fu_226_mymem_d0;

    mymem_we0_assign_proc : process(cache_dirty_load_reg_535, grp_cache_access_Pipeline_VITIS_LOOP_24_1_fu_226_mymem_we0, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (cache_dirty_load_reg_535 = ap_const_lv1_1))) then 
            mymem_we0 <= grp_cache_access_Pipeline_VITIS_LOOP_24_1_fu_226_mymem_we0;
        else 
            mymem_we0 <= ap_const_logic_0;
        end if; 
    end process;

    offset_fu_273_p1 <= address(6 - 1 downto 0);
    oned_fu_298_p2 <= (zerod_reg_464 or ap_const_lv3_1);
    or_ln57_fu_420_p2 <= (xor_ln57_fu_414_p2 or not_in_cache_reg_200);
    select_ln9_1_fu_342_p3 <= 
        set_old_1 when (icmp_ln9_1_fu_337_p2(0) = '1') else 
        select_ln9_fu_329_p3;
    select_ln9_2_fu_355_p3 <= 
        set_old_2 when (icmp_ln9_2_fu_350_p2(0) = '1') else 
        select_ln9_1_fu_342_p3;
    select_ln9_fu_329_p3 <= 
        set_old_0 when (icmp_ln9_fu_324_p2(0) = '1') else 
        set_old_3;
    tmp_1_fu_406_p3 <= (cache_index_1_reg_188 & ap_const_lv6_0);
    tmp_2_fu_426_p3 <= (cache_index_1_reg_188 & offset_reg_458);
    xor_ln52_fu_371_p2 <= (select_ln9_2_fu_355_p3 xor ap_const_lv1_1);
    xor_ln57_fu_414_p2 <= (cache_valid_q0 xor ap_const_lv1_1);
    zerod_fu_277_p3 <= (index_fu_263_p4 & ap_const_lv1_0);
    zext_ln38_fu_290_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(offset_reg_458),11));
    zext_ln43_fu_285_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zerod_fu_277_p3),64));
    zext_ln46_fu_303_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(oned_fu_298_p2),64));
    zext_ln57_fu_401_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_cache_index_1_phi_fu_191_p6),64));
    zext_ln72_fu_433_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_426_p3),64));
end behav;
